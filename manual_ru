Программа insane_striping служит для того, чтобы эмулировать разные конфигурации RAID.
В этом документе описана работа с имеющимися алгоритмическими модулями. Написание иных модулей можно осуществлять по образцу имеющихся.


Общие сведения

Основной модуль (insane_striping) создан на основе модуля RAID0 для device mapper'а. Этот модуль принимает на вход:
    1. Размер создаваемого блочного устройства.
    2. Алгоритм, по которому осуществляется чтение и запись на это устройство
    3. Количество устройств, из которых создается массив
    4. Размер блока (стрипа) в секторах
    5. Режим работы массива (random / sequential / recover)
    6. Устройства, из которых создается массив.


Размер устройства.

Размер задается в секторах. 1 сектор = 512 байт.
Например, если мы хотим на каждое устройство отвести по 10 гигабайт, и при этом у нас есть N устройств, то размер будет таким: 2*1024*1024*10*N


Алгоритм

Алгоритмические модули содержат в себе алгоритмы, по которым осуществляется адресация и восстановление диска при отказе. Иными словами, за структуру страйпа отвечают именно они. Каждый из этих модулей содержит в себе структуру insane_algorithm, в которой есть поле name. Это и есть то имя, которое передается основному модулю при создании устройства.


Размер блока

Этот размер тоже задается в секторах. Он обязательно должен быть степенью двойки. Например, если хотим задать размер блока 1 мегабайт, то нужно записать 2048.


Режимы работы массива

Random
В этом режиме при любой записи обновляются все синдромы, связанные с блоком данных. Чтение просто адресуется на нужные блоки данных.
Для обновления синдрома нужно сперва его прочитать. Таким образом, каждый синдром сперва прочитывается, а потом переписывается.

Sequential
В этом режиме после записи полного страйпа обновляются все синдромы.

Recover
В этом режиме один из дисков помечается как отказавший. После этого алгоритмический модуль определяет, какие блоки нужно читать для восстановления, и на какие блоки нужно восстанавливать диск. Осуществляется "восстановление", и в системный лог пишется, сколько было восстановлено, и за какое время.


Устройства
Нужно просто указать адреса устройств в виде /dev/sdX


Пример конфигурации

Таким образом, конфигурация массива может быть, например, такой:

0 125829120 insane raid6 6 1024 recover 3 /dev/sda /dev/sdb /dev/sdc /dev/sde /dev/sdf /dev/sdg

Здесь создается устройство по алгоритму raid6 на 60 Гб из шести дисков с размером блока 512 килобайт, устройство №4 (№3, начиная с 0) помечается как отказавшее и восстанавливается. Эту конфигурацию следует вынести в файл. Далее предполагаем, что она содержится в файле TABLE


Создание

Прежде чем создавать блочное устройство, следует скомпилировать и загрузить модули:

    make
    insmod ./insane_striping.ko
    insmod ./insane_raid6.ko (например)
    dmsetup create disk1 TABLE

В итоге создастся устройство /dev/mapper/disk1 по конфигурации, содержащейся в файле TABLE.



LRC

Алгоритмический модуль LRC имеет свои особенности. Именно - структура LRC-страйпа определяется во внешнем файле lrc_config.c
Таким образом, если задать структуру в этом файле, а потом скомпилировать модуль, то в собранном модуле будет задана именно эта структура страйпа.
Отсюда следует, что при тестировании разных схем распределения следует выгрузить и перекомпилировать модуль перед запуском.


Сборка конфигурации

Есть автоматический сборщик конфигурационного файла: get_constants.py. В него нужно вводить схему по следующему принципу:
Можно вводить цифры 1,2,...,9 (каждая цифра соответствует номеру группы).
Можно вводить букву S или s. Это обозначение синдрома. Следующая цифра после этой буквы воспринимается как номер группы синдрома (пока что не реализовано).
Можно вводить буквы E (empty block) и G (глобальный синдром). Буква E может быть только одна.
